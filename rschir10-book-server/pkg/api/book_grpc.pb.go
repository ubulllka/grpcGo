// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/proto/book.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BookV1_GetAll_FullMethodName = "/api.BookV1/GetAll"
	BookV1_Get_FullMethodName    = "/api.BookV1/Get"
	BookV1_Insert_FullMethodName = "/api.BookV1/Insert"
	BookV1_Update_FullMethodName = "/api.BookV1/Update"
	BookV1_Remove_FullMethodName = "/api.BookV1/Remove"
)

// BookV1Client is the client API for BookV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookV1Client interface {
	GetAll(ctx context.Context, in *EmptyBook, opts ...grpc.CallOption) (*BookList, error)
	Get(ctx context.Context, in *BookId, opts ...grpc.CallOption) (*Book, error)
	Insert(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error)
	Update(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error)
	Remove(ctx context.Context, in *BookId, opts ...grpc.CallOption) (*Book, error)
}

type bookV1Client struct {
	cc grpc.ClientConnInterface
}

func NewBookV1Client(cc grpc.ClientConnInterface) BookV1Client {
	return &bookV1Client{cc}
}

func (c *bookV1Client) GetAll(ctx context.Context, in *EmptyBook, opts ...grpc.CallOption) (*BookList, error) {
	out := new(BookList)
	err := c.cc.Invoke(ctx, BookV1_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookV1Client) Get(ctx context.Context, in *BookId, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, BookV1_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookV1Client) Insert(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, BookV1_Insert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookV1Client) Update(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, BookV1_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookV1Client) Remove(ctx context.Context, in *BookId, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, BookV1_Remove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookV1Server is the server API for BookV1 service.
// All implementations must embed UnimplementedBookV1Server
// for forward compatibility
type BookV1Server interface {
	GetAll(context.Context, *EmptyBook) (*BookList, error)
	Get(context.Context, *BookId) (*Book, error)
	Insert(context.Context, *Book) (*Book, error)
	Update(context.Context, *Book) (*Book, error)
	Remove(context.Context, *BookId) (*Book, error)
	mustEmbedUnimplementedBookV1Server()
}

// UnimplementedBookV1Server must be embedded to have forward compatible implementations.
type UnimplementedBookV1Server struct {
}

func (UnimplementedBookV1Server) GetAll(context.Context, *EmptyBook) (*BookList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedBookV1Server) Get(context.Context, *BookId) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBookV1Server) Insert(context.Context, *Book) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedBookV1Server) Update(context.Context, *Book) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBookV1Server) Remove(context.Context, *BookId) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedBookV1Server) mustEmbedUnimplementedBookV1Server() {}

// UnsafeBookV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookV1Server will
// result in compilation errors.
type UnsafeBookV1Server interface {
	mustEmbedUnimplementedBookV1Server()
}

func RegisterBookV1Server(s grpc.ServiceRegistrar, srv BookV1Server) {
	s.RegisterService(&BookV1_ServiceDesc, srv)
}

func _BookV1_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyBook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookV1Server).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookV1_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookV1Server).GetAll(ctx, req.(*EmptyBook))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookV1_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookV1Server).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookV1_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookV1Server).Get(ctx, req.(*BookId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookV1_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookV1Server).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookV1_Insert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookV1Server).Insert(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookV1_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookV1Server).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookV1_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookV1Server).Update(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookV1_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookV1Server).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookV1_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookV1Server).Remove(ctx, req.(*BookId))
	}
	return interceptor(ctx, in, info, handler)
}

// BookV1_ServiceDesc is the grpc.ServiceDesc for BookV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.BookV1",
	HandlerType: (*BookV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _BookV1_GetAll_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BookV1_Get_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _BookV1_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BookV1_Update_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _BookV1_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/book.proto",
}
