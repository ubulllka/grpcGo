// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/proto/shop.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductV1_GetAll_FullMethodName = "/api.ProductV1/GetAll"
	ProductV1_Get_FullMethodName    = "/api.ProductV1/Get"
	ProductV1_Insert_FullMethodName = "/api.ProductV1/Insert"
	ProductV1_Update_FullMethodName = "/api.ProductV1/Update"
	ProductV1_Remove_FullMethodName = "/api.ProductV1/Remove"
)

// ProductV1Client is the client API for ProductV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductV1Client interface {
	GetAll(ctx context.Context, in *EmptyProduct, opts ...grpc.CallOption) (*ProductList, error)
	Get(ctx context.Context, in *ProductId, opts ...grpc.CallOption) (*Product, error)
	Insert(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error)
	Update(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error)
	Remove(ctx context.Context, in *ProductId, opts ...grpc.CallOption) (*Product, error)
}

type productV1Client struct {
	cc grpc.ClientConnInterface
}

func NewProductV1Client(cc grpc.ClientConnInterface) ProductV1Client {
	return &productV1Client{cc}
}

func (c *productV1Client) GetAll(ctx context.Context, in *EmptyProduct, opts ...grpc.CallOption) (*ProductList, error) {
	out := new(ProductList)
	err := c.cc.Invoke(ctx, ProductV1_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productV1Client) Get(ctx context.Context, in *ProductId, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, ProductV1_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productV1Client) Insert(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, ProductV1_Insert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productV1Client) Update(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, ProductV1_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productV1Client) Remove(ctx context.Context, in *ProductId, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, ProductV1_Remove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductV1Server is the server API for ProductV1 service.
// All implementations must embed UnimplementedProductV1Server
// for forward compatibility
type ProductV1Server interface {
	GetAll(context.Context, *EmptyProduct) (*ProductList, error)
	Get(context.Context, *ProductId) (*Product, error)
	Insert(context.Context, *Product) (*Product, error)
	Update(context.Context, *Product) (*Product, error)
	Remove(context.Context, *ProductId) (*Product, error)
	mustEmbedUnimplementedProductV1Server()
}

// UnimplementedProductV1Server must be embedded to have forward compatible implementations.
type UnimplementedProductV1Server struct {
}

func (UnimplementedProductV1Server) GetAll(context.Context, *EmptyProduct) (*ProductList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedProductV1Server) Get(context.Context, *ProductId) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProductV1Server) Insert(context.Context, *Product) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedProductV1Server) Update(context.Context, *Product) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProductV1Server) Remove(context.Context, *ProductId) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedProductV1Server) mustEmbedUnimplementedProductV1Server() {}

// UnsafeProductV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductV1Server will
// result in compilation errors.
type UnsafeProductV1Server interface {
	mustEmbedUnimplementedProductV1Server()
}

func RegisterProductV1Server(s grpc.ServiceRegistrar, srv ProductV1Server) {
	s.RegisterService(&ProductV1_ServiceDesc, srv)
}

func _ProductV1_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyProduct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductV1Server).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductV1_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductV1Server).GetAll(ctx, req.(*EmptyProduct))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductV1_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductV1Server).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductV1_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductV1Server).Get(ctx, req.(*ProductId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductV1_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductV1Server).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductV1_Insert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductV1Server).Insert(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductV1_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductV1Server).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductV1_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductV1Server).Update(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductV1_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductV1Server).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductV1_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductV1Server).Remove(ctx, req.(*ProductId))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductV1_ServiceDesc is the grpc.ServiceDesc for ProductV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ProductV1",
	HandlerType: (*ProductV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _ProductV1_GetAll_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ProductV1_Get_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _ProductV1_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProductV1_Update_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _ProductV1_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/shop.proto",
}
